plugins {
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
    id 'application'
    id 'java-library'
    id 'org.beryx.runtime' version '1.13.0' apply false
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

wrapper {
    gradleVersion = '8.5'
}

group = 'RSPSi Editor'
version = '1.16.1'

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://repo.adobe.com/nexus/content/repositories/public/" }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.franzbecker.gradle-lombok'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    dependencies {
        api group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
        api group: 'org.checkerframework', name: 'checker-qual', version: '3.21.1'
        api group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
        api group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
        api 'javax.servlet:javax.servlet-api:4.0.1'
    }

    lombok {
        version = "1.18.22"
    }

    compileJava {
        options.fork = true
        options.incremental = true
    }

    apply plugin: 'org.openjfx.javafxplugin'
    javafx {
        version = "17"
        modules = ['javafx.base', 'javafx.fxml', 'javafx.graphics', 'javafx.controls', 'javafx.media', 'javafx.swing']
    }
}

import java.nio.file.Files
import java.nio.file.StandardCopyOption

task RSPSIJarDist {
    doLast {
        def rspsiJarDir = new File(projectDir, 'RSPSI-Jar')
        def pluginsDir = new File(rspsiJarDir, 'plugins')
        def activeDir = new File(pluginsDir, 'active')
        def inactiveDir = new File(pluginsDir, 'inactive')

        rspsiJarDir.mkdirs()
        pluginsDir.mkdirs()
        activeDir.mkdirs()
        inactiveDir.mkdirs()

        def editorJar = project(':Editor').tasks.jar.archiveFile.get().asFile.toPath()
        def editorJarDest = new File(rspsiJarDir, "Editor-${project.version}.jar").toPath()
        Files.copy(editorJar, editorJarDest, StandardCopyOption.REPLACE_EXISTING)

        project(':Plugins').subprojects.each { subproject ->
            def pluginJar = new File(subproject.buildDir, "libs/${subproject.name}.jar").toPath()
            if (Files.exists(pluginJar)) {
                Files.copy(pluginJar, new File(inactiveDir, pluginJar.fileName.toString()).toPath(), StandardCopyOption.REPLACE_EXISTING)
            }
        }
    }
}

RSPSIJarDist.dependsOn(':Editor:jar')
RSPSIJarDist.dependsOn('Plugins:OSRSPlugin:buildAndMove')
project(':Plugins').subprojects.each { subproject ->
    RSPSIJarDist.dependsOn(subproject.tasks.named('jar'))
}
